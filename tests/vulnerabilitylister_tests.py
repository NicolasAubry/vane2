# Vane 2.0: A web application vulnerability assessment tool.
# Copyright (C) 2017-  Delve Labs inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

from unittest import TestCase
from unittest.mock import MagicMock
from vane.vulnerabilitylister import VulnerabilityLister
from openwebvulndb.common.models import VulnerabilityList, Vulnerability, VersionRange


class TestVulnerabilityLister(TestCase):

    def setUp(self):
        self.vulnerability_lister = VulnerabilityLister()

    def test_list_vulnerabilities_return_empty_list_if_no_vuln_applicable_to_version(self):
        vuln0 = Vulnerability(id="12345", title="Vulnerability0",
                              affected_versions=[VersionRange(introduced_in="4.4", fixed_in="4.6")])
        vuln1 = Vulnerability(id="23456", title="Vulnerability1",
                              affected_versions=[VersionRange(fixed_in="3.9")])
        vuln_list = VulnerabilityList(key="wordpress", producer="producer", vulnerabilities=[vuln0, vuln1])

        applicable_vuln0 = self.vulnerability_lister.list_vulnerabilities("4.7", vuln_list)
        applicable_vuln1 = self.vulnerability_lister.list_vulnerabilities("4.3", vuln_list)

        self.assertEqual(len(applicable_vuln0), 0)
        self.assertEqual(len(applicable_vuln1), 0)

    def test_list_vulnerabilities_return_vulnerabilities_with_introduced_in_lower_than_version_and_fixed_in_upper_than_version(self):
        vuln0 = Vulnerability(id="12345", title="Vulnerability0",
                              affected_versions=[VersionRange(introduced_in="2.5.9", fixed_in="4.7.2")])
        vuln1 = Vulnerability(id="23456", title="Vulnerability1",
                              affected_versions=[VersionRange(introduced_in="1.6.2", fixed_in="4.9")])
        vuln_list = VulnerabilityList(key="wordpress", producer="producer", vulnerabilities=[vuln0, vuln1])

        applicable_vuln0 = self.vulnerability_lister.list_vulnerabilities("4.7", vuln_list)
        applicable_vuln1 = self.vulnerability_lister.list_vulnerabilities("3.5.8", vuln_list)
        applicable_vuln2 = self.vulnerability_lister.list_vulnerabilities("2.4.8", vuln_list)

        self.assertIn(vuln0, applicable_vuln0)
        self.assertIn(vuln1, applicable_vuln0)
        self.assertIn(vuln0, applicable_vuln1)
        self.assertIn(vuln1, applicable_vuln1)
        self.assertNotIn(vuln0, applicable_vuln2)
        self.assertIn(vuln1, applicable_vuln2)

    def test_list_vulnerabilities_return_vulnerabilities_with_no_introduced_in_if_fixed_in_is_upper_than_version(self):
        vuln0 = Vulnerability(id="12345", title="Vulnerability0",
                              affected_versions=[VersionRange(fixed_in="4.7.2")])
        vuln1 = Vulnerability(id="23456", title="Vulnerability1",
                              affected_versions=[VersionRange(fixed_in="4.9")])
        vuln_list = VulnerabilityList(key="wordpress", producer="producer", vulnerabilities=[vuln0, vuln1])

        applicable_vuln0 = self.vulnerability_lister.list_vulnerabilities("4.7", vuln_list)
        applicable_vuln1 = self.vulnerability_lister.list_vulnerabilities("4.8.2", vuln_list)

        self.assertIn(vuln0, applicable_vuln0)
        self.assertIn(vuln1, applicable_vuln0)
        self.assertNotIn(vuln0, applicable_vuln1)
        self.assertIn(vuln1, applicable_vuln1)

    def test_list_vulnerabilities_return_all_vulnerabilities_with_no_introduced_nor_fixed_in(self):
        vuln0 = Vulnerability(id="12345", title="Vulnerability0")
        vuln1 = Vulnerability(id="23456", title="Vulnerability1", affected_versions=[VersionRange()])
        vuln_list = VulnerabilityList(key="wordpress", producer="producer", vulnerabilities=[vuln0, vuln1])

        applicable_vuln0 = self.vulnerability_lister.list_vulnerabilities("4.7", vuln_list)
        applicable_vuln1 = self.vulnerability_lister.list_vulnerabilities("0.1", vuln_list)
        applicable_vuln2 = self.vulnerability_lister.list_vulnerabilities("100.2.3", vuln_list)

        self.assertIn(vuln0, applicable_vuln0)
        self.assertIn(vuln1, applicable_vuln0)
        self.assertIn(vuln0, applicable_vuln1)
        self.assertIn(vuln1, applicable_vuln1)
        self.assertIn(vuln0, applicable_vuln2)
        self.assertIn(vuln1, applicable_vuln2)

    def test_list_vulnerabilities_return_vulnerabilities_with_introduced_in_lower_than_version_if_no_fixed_in(self):
        vuln0 = Vulnerability(id="12345", title="Vulnerability0",
                              affected_versions=[VersionRange(introduced_in="2.3.4")])
        vuln1 = Vulnerability(id="23456", title="Vulnerability1",
                              affected_versions=[VersionRange(introduced_in="1.5.6")])
        vuln_list = VulnerabilityList(key="wordpress", producer="producer", vulnerabilities=[vuln0, vuln1])

        applicable_vuln0 = self.vulnerability_lister.list_vulnerabilities("4.7", vuln_list)
        applicable_vuln1 = self.vulnerability_lister.list_vulnerabilities("2.3.5", vuln_list)
        applicable_vuln2 = self.vulnerability_lister.list_vulnerabilities("1.7", vuln_list)

        self.assertIn(vuln0, applicable_vuln0)
        self.assertIn(vuln1, applicable_vuln0)
        self.assertIn(vuln0, applicable_vuln1)
        self.assertIn(vuln1, applicable_vuln1)
        self.assertNotIn(vuln0, applicable_vuln2)
        self.assertIn(vuln1, applicable_vuln2)
